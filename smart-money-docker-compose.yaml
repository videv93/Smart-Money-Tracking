version: '3.8'

services:
  # MinIO for Delta Lake storage
  minio:
    image: minio/minio:latest
    container_name: smart-money-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - smart-money-network

  # Create MinIO bucket
  minio-setup:
    image: minio/mc:latest
    container_name: smart-money-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set minio http://minio:9000 minio minio123;
      /usr/bin/mc mb minio/smart-money-data --ignore-existing;
      exit 0;
      "
    networks:
      - smart-money-network

  # PostgreSQL for data warehouse
  postgres:
    image: postgres:15
    container_name: smart-money-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: smart_money_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./utils/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - smart-money-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: smart-money-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - smart-money-network

  # Kafka for streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smart-money-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - smart-money-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: smart-money-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: smart-money-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - smart-money-network

  # MLflow for model tracking
  mlflow:
    image: python:3.9
    container_name: smart-money-mlflow
    ports:
      - "5000:5000"
    working_dir: /app
    volumes:
      - ./model_experiment:/app
      - mlflow_data:/mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: sqlite:////mlflow/mlflow.db
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    command: >
      sh -c "
      pip install mlflow psycopg2-binary &&
      mlflow server 
      --backend-store-uri sqlite:////mlflow/mlflow.db 
      --default-artifact-root /mlflow/artifacts 
      --host 0.0.0.0 
      --port 5000
      "
    networks:
      - smart-money-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-money-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - smart-money-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: smart-money-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - smart-money-network

  # Blockchain data ingestion service
  blockchain-ingestion:
    build:
      context: .
      dockerfile: blockchain_ingestion/Dockerfile
    container_name: smart-money-ingestion
    depends_on:
      - minio
      - kafka
    environment:
      - MINIO_ENDPOINT=minio:9000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./configs:/app/configs
    networks:
      - smart-money-network
    restart: unless-stopped

  # Batch processing service
  batch-processor:
    build:
      context: .
      dockerfile: batch_processing/Dockerfile
    container_name: smart-money-batch
    depends_on:
      - minio
      - postgres
    environment:
      - MINIO_ENDPOINT=minio:9000
      - POSTGRES_HOST=postgres
    volumes:
      - ./configs:/app/configs
    networks:
      - smart-money-network
    profiles:
      - batch

  # Stream processing service
  stream-processor:
    build:
      context: .
      dockerfile: stream_processing/Dockerfile
    container_name: smart-money-stream
    depends_on:
      - kafka
      - postgres
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - POSTGRES_HOST=postgres
    volumes:
      - ./configs:/app/configs
      - ./jars:/app/jars
    networks:
      - smart-money-network
    profiles:
      - stream

  # ML training service
  ml-trainer:
    build:
      context: .
      dockerfile: model_experiment/Dockerfile
    container_name: smart-money-ml
    depends_on:
      - postgres
      - mlflow
    environment:
      - POSTGRES_HOST=postgres
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./configs:/app/configs
      - ./models:/app/models
    networks:
      - smart-money-network
    profiles:
      - training

  # Alert monitoring service
  alert-monitor:
    build:
      context: .
      dockerfile: monitoring/Dockerfile
    container_name: smart-money-alerts
    depends_on:
      - kafka
    ports:
      - "8000:8000"  # Prometheus metrics
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./configs:/app/configs
    networks:
      - smart-money-network

  # Data validation with Great Expectations
  data-validator:
    image: python:3.9
    container_name: smart-money-validator
    depends_on:
      - postgres
    working_dir: /app
    volumes:
      - ./data_validation:/app
      - ./configs:/app/configs
    environment:
      - POSTGRES_HOST=postgres
    command: >
      sh -c "
      pip install great-expectations psycopg2-binary pyyaml pandas &&
      sleep 30 &&
      python validate_data.py
      "
    networks:
      - smart-money-network
    profiles:
      - validation

volumes:
  minio_data:
  postgres_data:
  kafka_data:
  mlflow_data:
  prometheus_data:
  grafana_data:

networks:
  smart-money-network:
    driver: bridge